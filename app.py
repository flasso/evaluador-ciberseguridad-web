from flask import Flask, render_template, request

app = Flask(__name__)

# Segmentos y preguntas
segmentos = [
    ("GestiÃ³n y Visibilidad", [
        ("Â¿QuiÃ©n es el responsable de TI/ciberseguridad?", ["Dedicado y certificado", "Interno no exclusivo", "Proveedor externo", "Ninguno"]),
        ("Â¿Monitorean la seguridad regularmente?", ["Diario/24x7", "Semanal", "Mensual", "No"]),
        ("Â¿Tienen inventario actualizado de equipos/datos?", ["SÃ­, detallado", "SÃ­, incompleto", "Parcial", "No"]),
    ]),
    ("ProtecciÃ³n de Red", [
        ("Â¿Tienen firewall de hardware o UTM?", ["SÃ­, gestionado", "SÃ­, mal configurado", "Solo software", "No firewall"]),
        ("Â¿QuiÃ©n gestiona el firewall?", ["Experto interno", "Proveedor MSSP", "TI no especializado", "No hay firewall"]),
        ("Â¿Wi-Fi estÃ¡ segura y separada para invitados?", ["SÃ­, WPA3", "SÃ­, pero dÃ©bil", "No segura", "No"]),
    ]),
    ("ProtecciÃ³n de Dispositivos", [
        ("Â¿Tienen antivirus con EDR en todos los equipos?", ["SÃ­, EDR", "SÃ­, antivirus bÃ¡sico", "Gratis", "No"]),
        ("Â¿Las contraseÃ±as son seguras y se actualizan periÃ³dicamente?", ["SÃ­, con polÃ­tica definida", "SÃ­, pero informal", "No actualizan", "No"]),
        ("Â¿Actualizan el sistema operativo y software con parches recientes?", ["Automatizado", "Manual", "Irregular", "No"]),
        ("Â¿Tienen MFA (AutenticaciÃ³n Multifactor) activada en cuentas crÃ­ticas?", ["SÃ­, en todas", "SÃ­, en algunas", "Pocas", "No"]),
    ]),
    ("Respaldo y Conciencia", [
        ("Â¿Respaldan datos crÃ­ticos a diario?", ["SÃ­, diario", "Semanal", "Mensual", "No"]),
        ("Â¿Prueban restauraciÃ³n de respaldos?", ["SÃ­, programada", "Ocasional", "Nunca", "No sabe"]),
        ("Â¿Capacitan regularmente al personal en ciberseguridad?", ["Al menos 1 vez/aÃ±o", "SÃ­, pero informal", "Rara vez", "Nunca"]),
        ("Â¿Tiene responsable para las copias de seguridad?", ["Personal especializado", "TI no especializado", "Nadie asignado", "No se hace"]),
    ])
]

# PonderaciÃ³n: 3 â†’ Ã³ptimo â€¦ 0 â†’ crÃ­tico
valores = [3, 2, 1, 0]

@app.route("/", methods=["GET"])
def intro():
    return render_template("intro.html")

@app.route("/evaluacion", methods=["GET", "POST"])
def evaluacion():
    if request.method == "POST":
        respuestas = dict(request.form)
        puntaje_total = 0
        puntaje_maximo = 0
        recomendaciones = []

        for segmento, preguntas in segmentos:
            for pregunta, opciones in preguntas:
                respuesta = respuestas.get(pregunta)
                if respuesta in opciones:
                    idx = opciones.index(respuesta)
                    puntos = valores[idx]
                    puntaje_total += puntos
                    puntaje_maximo += 3
                    if puntos <=1:
                        recomendaciones.append(f"ðŸ”· Mejore: {pregunta} (actual: {respuesta})")

        porcentaje = round((puntaje_total / puntaje_maximo) * 100) if puntaje_maximo > 0 else 0

        # AÃ±adir consejo final
        recomendaciones.append("ðŸ’¡ RecomendaciÃ³n: considere contar con un proveedor MSP que le apoye en la gestiÃ³n e implementaciÃ³n de las mejoras necesarias.")

        return render_template("resultados.html",
                               respuestas=respuestas,
                               porcentaje=porcentaje,
                               recomendaciones=recomendaciones)

    return render_template("index.html", segmentos=segmentos)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
